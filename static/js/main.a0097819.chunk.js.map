{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","currentDateTime","moment","useState","currentTime","setCurrentTime","useEffect","setInterval","id","nanoid","name","zone","watches","setWatches","form","setForm","handleChange","target","value","type","checked","prevForm","className","onSubmit","evt","preventDefault","newWatch","newWatches","prevWatches","onChange","required","map","watch","add","format","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gRAqEeA,MAhEf,WAEE,IAAMC,EAAkB,kBAAMC,OAE9B,EAAsCC,mBAASF,KAA/C,mBAAOG,EAAP,KAAoBC,EAApB,KAEAC,qBAAU,WACRC,aACE,kBAAMF,EAAeJ,OACrB,OAED,CAACG,IAEJ,MAA8BD,mBAAS,CACrC,CACEK,GAAIC,cACJC,KAAM,SACNC,KAAM,OAJV,mBAAOC,EAAP,KAAgBC,EAAhB,KAQA,EAAwBV,mBAAS,CAC/BO,KAAM,GACNC,KAAM,KAFR,mBAAOG,EAAP,KAAaC,EAAb,KAKMC,EAAe,SAAC,GAAc,IAAbC,EAAY,EAAZA,OACfP,EAAOO,EAAOP,KACdQ,EAAwB,aAAhBD,EAAOE,KAAsBF,EAAOG,QAAUH,EAAOC,MACnEH,GAAQ,SAAAM,GAAQ,kCAASA,GAAT,kBAAoBX,EAAOQ,QAiB7C,OACE,sBAAKI,UAAU,MAAf,UACE,uBAAMC,SAhBY,SAAAC,GACpBA,EAAIC,iBAEJ,IAAMC,EAAW,CACflB,GAAIC,cACJC,KAAMI,EAAKJ,KACXC,KAAMG,EAAKH,MAGPgB,EAAU,sBAAOf,GAAP,CAAgBc,IAEhCb,GAAW,SAAAe,GAAW,OAAID,MAKxB,UACE,uBAAOjB,KAAK,OAAOQ,MAAOJ,EAAKJ,KAAMmB,SAAUb,EAAcc,UAAQ,IACrE,uBAAOpB,KAAK,OAAOQ,MAAOJ,EAAKH,KAAMkB,SAAUb,EAAcc,UAAQ,IACrE,wBAAQX,KAAK,SAAb,iEAEDP,EAAQmB,KAAI,SAAAC,GAAK,OAChB,sBAAKV,UAAU,aAAf,UACE,6BAAKU,EAAMtB,OACX,4BAAIsB,EAAMrB,OACV,4BAAIT,MAAS+B,IAAID,EAAMrB,KAAM,SAASuB,OAAO,gBAHdF,EAAMxB,WC/ChC2B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.a0097819.chunk.js","sourcesContent":["import React, {useEffect, useState} from 'react'\nimport './App.css'\nimport { nanoid } from 'nanoid'\nimport moment from 'moment'\n\nfunction App() {\n\n  const currentDateTime = () => moment()\n  \n  const [currentTime, setCurrentTime] = useState(currentDateTime())\n\n  useEffect(() => {\n    setInterval(\n      () => setCurrentTime(currentDateTime()),\n      1000\n    );\n  }, [currentTime]);\n\n  const [watches, setWatches] = useState([\n    {\n      id: nanoid(),\n      name: \"Moscow\",\n      zone: \"0\"\n    }\n  ])\n\n  const [form, setForm] = useState({\n    name: \"\",\n    zone: \"\"\n  })\n\n  const handleChange = ({target}) => {\n    const name = target.name\n    const value = target.type === 'checkbox' ? target.checked : target.value;\n    setForm(prevForm => ({...prevForm, [name]: value}))\n  }\n\n  const handleSubmit = (evt => {\n    evt.preventDefault()\n\n    const newWatch = {\n      id: nanoid(),\n      name: form.name,\n      zone: form.zone\n    }\n\n    const newWatches = [...watches, newWatch]\n\n    setWatches(prevWatches => newWatches)\n  })\n\n  return (\n    <div className=\"App\">\n      <form onSubmit={handleSubmit}>\n        <input name=\"name\" value={form.name} onChange={handleChange} required />\n        <input name=\"zone\" value={form.zone} onChange={handleChange} required />\n        <button type=\"submit\">Добавить</button>\n      </form>\n      {watches.map(watch => \n        <div className='watch-item' key={watch.id}>\n          <h4>{watch.name}</h4>\n          <p>{watch.zone}</p>\n          <p>{moment().add(watch.zone, 'hours').format(\"HH:mm:ss\")}</p>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}